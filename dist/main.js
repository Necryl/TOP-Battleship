(()=>{var n={556:n=>{const e=(()=>{function n(n){if(!(n<5&&n>0))throw Error(`invalid length param: out of range (1-4) -> ${n}`);let e=0;return{length:n,hit:function(){if(!(e<n))throw Error("Ship is already destroyed");e+=1},isSunk:function(){return n===e},cells:[]}}function t(n){return{loc:n,ship:null,shot:!1}}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10;const a=[],r={};function o(){a.splice(0,1/0),Object.keys(r).forEach((n=>{delete r[n]}));for(let n=0;n<e;n++)for(let a=0;a<e;a++)r[[n,a]]=t([n,a]);for(let e=1;e<=4;e++)a.push(n(e))}function s(n){for(var t=arguments.length,o=new Array(t>1?t-1:0),s=1;s<t;s++)o[s-1]=arguments[s];if(o.length!==n)throw Error("number of cells to be filled doesn't match ship size");o.forEach((n=>{if(n.forEach((n=>{if(n<0||n>e-1)throw Error("at least one of the given cells is invalid")})),null!==r[n].ship)throw Error("at least one of the given cells already host a ship")}));const i=[],A=[];o.forEach((n=>{i.push(n[0]),A.push(n[1])}));const l=n=>{let e=!0;for(let t=1;t<n.length;t++)if(n[t-1]!==n[t]){e=!1;break}return e};if(!l(i)&&!l(A))throw Error("the given cells are not adjacent");0!==a[n-1].cells.length&&a[n-1].cells.forEach((n=>{r[n].ship=null}));const c=[];[...o].forEach((e=>{r[e].ship=n,c.push(e)})),a[n-1].cells=c}function i(n,e){let t,a="Array";switch("string"==typeof n&&(n=JSON.parse(`[${n}]`),a="String"),e){case"up":t=[n[0]+1,n[1]];break;case"down":t=[n[0]-1,n[1]];break;case"right":t=[n[0],n[1]+1];break;case"left":t=[n[0],n[1]-1];break;default:throw Error(`Invalid value for parameter dir (direction): ${e}`)}return t=t.reduce(((n,e)=>((e>9||e<0)&&(n=!1),n)),t),"String"===a&&Array.isArray(t)?t.join(","):t}function A(){o();const n=Object.keys(r),e=()=>{let e;for(;;){const t=Math.floor(Math.random()*n.length);if(e=JSON.parse(`[${n[t]}]`),null===r[e].ship)break;n.splice(t,1)}return e};a.forEach((n=>{s(n.length,...(n=>{let t=[e()],a=["up","down","right","left"],o=Math.floor(Math.random()*a.length);for(;t.length!==n;){const n=i(t[t.length-1],a[o]);void 0!==r[n]&&null===r[n].ship?t.push(n):(t=t.slice(0,1),a.splice(o,1),0===a.length&&(a=["up","down","right","left"],t=[e()]),o=Math.floor(Math.random()*a.length))}return t})(n.length))}))}function l(n){n.forEach((n=>{if(n<0||n>e-1)throw Error("Given cell location is invalid")}));const t=r[n];return t.shot=!0,null!==t.ship&&(a[t.ship-1].hit(),!0)}function c(){return a.reduce(((n,e)=>(!1===e.isSunk()&&(n=!1),n)),!0)}return o(),{initiate:o,place:s,placeAtRandom:A,receiveAttack:l,getAdjacentCell:i,defeated:c,ships:a,cells:r}}const r=(()=>{const n=[],t=a(10);function r(){return e.Player.board}function o(e){return!!n.includes(JSON.stringify(e))&&r().cells[e]}const s=[];return{board:t,currentBoard:r,look:o,reset:function(){n.splice(0,1/0),s.splice(0,1/0),t.initiate()},exposed:n=>{const e=[],t=[null];function a(n){if(void 0===n)return t[0];t[0]=["up","down","vertical"].includes(n)?"vertical":["left","right","horizontal"].includes(n)?"horizontal":null}return{cells:e,direction:a,isSunk:function(){if(null===a())return!1;const n="vertical"===a()?["up","down"]:["left","right"],t=o(r().getAdjacentCell(e[0])),s=o(r().getAdjacentCell(e[e.length-1],n[1]));return!1!==t&&!1!==s},ship:n}},exposedShips:s,visibleCells:n}})(),o={board:a(10)};return{Ship:n,Gameboard:a,Cell:t,AI:r,Player:o}})();n.exports={Data:e}},883:(n,e,t)=>{"use strict";t.d(e,{Z:()=>i});var a=t(537),r=t.n(a),o=t(645),s=t.n(o)()(r());s.push([n.id,'#arenaView {\n  /* background-color: aqua; */\n  display: grid;\n  grid-template-rows: auto auto 1fr;\n  gap: 1rem;\n  padding: 1rem;\n}\n\n#topBar {\n  /* background-color: yellow; */\n\n  display: grid;\n  grid-template-columns: auto auto;\n  place-content: center;\n  gap: 1rem;\n}\n\n#arenaView #topBar button {\n  font-size: 1.3rem;\n}\n\n#arena {\n  /* background-color: green; */\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 1rem;\n}\n\n#arena > div {\n  display: grid;\n  gap: 1rem;\n  grid-template-columns: auto auto;\n}\n\n#player > div:not(.statusContainer) {\n  justify-self: end;\n}\n\n.controls {\n  display: grid;\n  grid-template-columns: auto auto;\n  place-content: center;\n  gap: 1rem;\n}\n\n.controls button {\n  font-size: 1rem;\n}\n\n#arena .statusContainer {\n  display: grid;\n  gap: 0.75rem;\n}\n\n#arena #player .statusContainer {\n  justify-items: start;\n}\n\n#arena #computer .statusContainer {\n  justify-items: end;\n}\n\n#arena .statusContainer > * {\n  display: block;\n  --unit: 1rem;\n  height: var(--unit);\n  width: calc(var(--unit) * var(--size));\n  background-color: var(--status);\n}\n\n#arena > div > div {\n  align-content: center;\n  gap: 1rem;\n}\n#arena > div > div:not(.statusContainer) {\n  display: grid;\n  width: 100%;\n}\n\n#arena div:not(.statusContainer) .name {\n  text-align: center;\n  user-select: none;\n  position: relative;\n}\n\n[data-stage="Battle"] .name.playing::after {\n  content: "";\n  position: absolute;\n  animation: dot-dot-dot 3s infinite;\n}\n\n@keyframes dot-dot-dot {\n  0% {\n    content: ".";\n  }\n  25% {\n    content: ".";\n  }\n  50% {\n    content: "..";\n  }\n  100% {\n    content: "...";\n  }\n}\n\n#arena div:not(.statusContainer) .board {\n  border: 0.15rem solid black;\n  position: relative;\n  display: grid;\n  place-self: center;\n  width: 100%;\n  max-width: 50vh;\n  min-width: 14rem;\n\n  grid-template-columns: repeat(10, 10%);\n}\n\n#arena div:not(.statusContainer) .board > .cell {\n  padding-bottom: 100%;\n  border: 0.1rem solid rgba(128, 128, 128, 0.342);\n  background-color: var(--status);\n  position: relative;\n}\n\n[data-stage="Setup"] #arena #player .cell {\n  touch-action: none;\n}\n\n[data-stage="Battle"] #arena #computer .board .cell:hover::after {\n  content: "";\n  position: absolute;\n  z-index: 1;\n  top: 0%;\n  left: 0%;\n  height: 100%;\n  width: 100%;\n  outline: 0.15rem solid rgb(255, 255, 255);\n  pointer-events: none;\n}\n\n:is([data-stage="Battle"], [data-stage="End"]) :is(.controls, #startBtn) {\n  display: none !important;\n}\n\n#bottomBar {\n  /* background-color: red; */\n  display: grid;\n  place-content: center;\n}\n\n#bottomBar button {\n  font-size: 1.75rem;\n}\n\n.status.selected {\n  outline: 0.2rem solid rgb(0, 110, 255);\n}\n\n.status[data-size="4"] {\n  --size: 4;\n}\n.status[data-size="3"] {\n  --size: 3;\n}\n.status[data-size="2"] {\n  --size: 2;\n}\n.status[data-size="1"] {\n  --size: 1;\n}\n.status[data-status="intact"] {\n  --status: grey;\n}\n.status[data-status="sunk"] {\n  --status: red;\n}\n\n.cell[data-status="hold"] {\n  --status: white;\n}\n\n.cell[data-status="mist"] {\n  --status: rgb(94, 122, 141);\n}\n.cell[data-status="water"] {\n  --status: rgb(20, 95, 145);\n}\n.cell[data-status="ship"] {\n  --status: rgb(96, 100, 102);\n}\n.cell[data-status="hit"] {\n  --status: rgb(37, 34, 39);\n}\n.cell[data-status="sunk"] {\n  --status: rgb(145, 42, 42);\n}\n\n@media (max-aspect-ratio: 65/96) {\n  #arena {\n    grid-template-columns: auto;\n  }\n  #arena > div {\n    grid-template-columns: auto 1fr;\n  }\n  #arena > div > div {\n    gap: 0.3rem;\n  }\n  #arena div:not(.statusContainer) .board {\n    max-width: 40vh;\n  }\n  #computer > div:not(.statusContainer) {\n    grid-area: B;\n  }\n  #arena #computer .statusContainer {\n    grid-area: S;\n    justify-items: start;\n  }\n  #computer {\n    grid-template-areas: "S B";\n  }\n  #computer .controls {\n    display: none;\n  }\n}\n\n@media (min-aspect-ratio: 916/410) {\n  #arenaView {\n    position: relative;\n    /* background-color: aqua; */\n  }\n  #topBar {\n    position: fixed;\n    top: 0.3rem;\n    left: 0.3rem;\n    grid-template-columns: auto;\n    background-color: white;\n  }\n  #topBar button {\n    scale: 0%;\n    background-color: white;\n  }\n  #helpBtn,\n  #newGameBtn {\n    position: absolute;\n  }\n  #helpBtn {\n    top: 100%;\n  }\n  #newGameBtn {\n    top: 300%;\n    width: max-content;\n  }\n  #topBar::before {\n    content: "MENU ^";\n  }\n  #topBar:hover::before {\n    content: "MENU v";\n  }\n  #topBar.open button {\n    scale: 100%;\n  }\n  #bottomBar {\n    position: fixed;\n    bottom: 0%;\n    right: 0%;\n  }\n}\n',"",{version:3,sources:["webpack://./src/styles/arenaView.css"],names:[],mappings:"AAAA;EACE,4BAA4B;EAC5B,aAAa;EACb,iCAAiC;EACjC,SAAS;EACT,aAAa;AACf;;AAEA;EACE,8BAA8B;;EAE9B,aAAa;EACb,gCAAgC;EAChC,qBAAqB;EACrB,SAAS;AACX;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,6BAA6B;EAC7B,aAAa;EACb,8BAA8B;EAC9B,SAAS;AACX;;AAEA;EACE,aAAa;EACb,SAAS;EACT,gCAAgC;AAClC;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,gCAAgC;EAChC,qBAAqB;EACrB,SAAS;AACX;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,YAAY;AACd;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,cAAc;EACd,YAAY;EACZ,mBAAmB;EACnB,sCAAsC;EACtC,+BAA+B;AACjC;;AAEA;EACE,qBAAqB;EACrB,SAAS;AACX;AACA;EACE,aAAa;EACb,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,kCAAkC;AACpC;;AAEA;EACE;IACE,YAAY;EACd;EACA;IACE,YAAY;EACd;EACA;IACE,aAAa;EACf;EACA;IACE,cAAc;EAChB;AACF;;AAEA;EACE,2BAA2B;EAC3B,kBAAkB;EAClB,aAAa;EACb,kBAAkB;EAClB,WAAW;EACX,eAAe;EACf,gBAAgB;;EAEhB,sCAAsC;AACxC;;AAEA;EACE,oBAAoB;EACpB,+CAA+C;EAC/C,+BAA+B;EAC/B,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,UAAU;EACV,OAAO;EACP,QAAQ;EACR,YAAY;EACZ,WAAW;EACX,yCAAyC;EACzC,oBAAoB;AACtB;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,2BAA2B;EAC3B,aAAa;EACb,qBAAqB;AACvB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,sCAAsC;AACxC;;AAEA;EACE,SAAS;AACX;AACA;EACE,SAAS;AACX;AACA;EACE,SAAS;AACX;AACA;EACE,SAAS;AACX;AACA;EACE,cAAc;AAChB;AACA;EACE,aAAa;AACf;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,2BAA2B;AAC7B;AACA;EACE,0BAA0B;AAC5B;AACA;EACE,2BAA2B;AAC7B;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,0BAA0B;AAC5B;;AAEA;EACE;IACE,2BAA2B;EAC7B;EACA;IACE,+BAA+B;EACjC;EACA;IACE,WAAW;EACb;EACA;IACE,eAAe;EACjB;EACA;IACE,YAAY;EACd;EACA;IACE,YAAY;IACZ,oBAAoB;EACtB;EACA;IACE,0BAA0B;EAC5B;EACA;IACE,aAAa;EACf;AACF;;AAEA;EACE;IACE,kBAAkB;IAClB,4BAA4B;EAC9B;EACA;IACE,eAAe;IACf,WAAW;IACX,YAAY;IACZ,2BAA2B;IAC3B,uBAAuB;EACzB;EACA;IACE,SAAS;IACT,uBAAuB;EACzB;EACA;;IAEE,kBAAkB;EACpB;EACA;IACE,SAAS;EACX;EACA;IACE,SAAS;IACT,kBAAkB;EACpB;EACA;IACE,iBAAiB;EACnB;EACA;IACE,iBAAiB;EACnB;EACA;IACE,WAAW;EACb;EACA;IACE,eAAe;IACf,UAAU;IACV,SAAS;EACX;AACF",sourcesContent:['#arenaView {\n  /* background-color: aqua; */\n  display: grid;\n  grid-template-rows: auto auto 1fr;\n  gap: 1rem;\n  padding: 1rem;\n}\n\n#topBar {\n  /* background-color: yellow; */\n\n  display: grid;\n  grid-template-columns: auto auto;\n  place-content: center;\n  gap: 1rem;\n}\n\n#arenaView #topBar button {\n  font-size: 1.3rem;\n}\n\n#arena {\n  /* background-color: green; */\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 1rem;\n}\n\n#arena > div {\n  display: grid;\n  gap: 1rem;\n  grid-template-columns: auto auto;\n}\n\n#player > div:not(.statusContainer) {\n  justify-self: end;\n}\n\n.controls {\n  display: grid;\n  grid-template-columns: auto auto;\n  place-content: center;\n  gap: 1rem;\n}\n\n.controls button {\n  font-size: 1rem;\n}\n\n#arena .statusContainer {\n  display: grid;\n  gap: 0.75rem;\n}\n\n#arena #player .statusContainer {\n  justify-items: start;\n}\n\n#arena #computer .statusContainer {\n  justify-items: end;\n}\n\n#arena .statusContainer > * {\n  display: block;\n  --unit: 1rem;\n  height: var(--unit);\n  width: calc(var(--unit) * var(--size));\n  background-color: var(--status);\n}\n\n#arena > div > div {\n  align-content: center;\n  gap: 1rem;\n}\n#arena > div > div:not(.statusContainer) {\n  display: grid;\n  width: 100%;\n}\n\n#arena div:not(.statusContainer) .name {\n  text-align: center;\n  user-select: none;\n  position: relative;\n}\n\n[data-stage="Battle"] .name.playing::after {\n  content: "";\n  position: absolute;\n  animation: dot-dot-dot 3s infinite;\n}\n\n@keyframes dot-dot-dot {\n  0% {\n    content: ".";\n  }\n  25% {\n    content: ".";\n  }\n  50% {\n    content: "..";\n  }\n  100% {\n    content: "...";\n  }\n}\n\n#arena div:not(.statusContainer) .board {\n  border: 0.15rem solid black;\n  position: relative;\n  display: grid;\n  place-self: center;\n  width: 100%;\n  max-width: 50vh;\n  min-width: 14rem;\n\n  grid-template-columns: repeat(10, 10%);\n}\n\n#arena div:not(.statusContainer) .board > .cell {\n  padding-bottom: 100%;\n  border: 0.1rem solid rgba(128, 128, 128, 0.342);\n  background-color: var(--status);\n  position: relative;\n}\n\n[data-stage="Setup"] #arena #player .cell {\n  touch-action: none;\n}\n\n[data-stage="Battle"] #arena #computer .board .cell:hover::after {\n  content: "";\n  position: absolute;\n  z-index: 1;\n  top: 0%;\n  left: 0%;\n  height: 100%;\n  width: 100%;\n  outline: 0.15rem solid rgb(255, 255, 255);\n  pointer-events: none;\n}\n\n:is([data-stage="Battle"], [data-stage="End"]) :is(.controls, #startBtn) {\n  display: none !important;\n}\n\n#bottomBar {\n  /* background-color: red; */\n  display: grid;\n  place-content: center;\n}\n\n#bottomBar button {\n  font-size: 1.75rem;\n}\n\n.status.selected {\n  outline: 0.2rem solid rgb(0, 110, 255);\n}\n\n.status[data-size="4"] {\n  --size: 4;\n}\n.status[data-size="3"] {\n  --size: 3;\n}\n.status[data-size="2"] {\n  --size: 2;\n}\n.status[data-size="1"] {\n  --size: 1;\n}\n.status[data-status="intact"] {\n  --status: grey;\n}\n.status[data-status="sunk"] {\n  --status: red;\n}\n\n.cell[data-status="hold"] {\n  --status: white;\n}\n\n.cell[data-status="mist"] {\n  --status: rgb(94, 122, 141);\n}\n.cell[data-status="water"] {\n  --status: rgb(20, 95, 145);\n}\n.cell[data-status="ship"] {\n  --status: rgb(96, 100, 102);\n}\n.cell[data-status="hit"] {\n  --status: rgb(37, 34, 39);\n}\n.cell[data-status="sunk"] {\n  --status: rgb(145, 42, 42);\n}\n\n@media (max-aspect-ratio: 65/96) {\n  #arena {\n    grid-template-columns: auto;\n  }\n  #arena > div {\n    grid-template-columns: auto 1fr;\n  }\n  #arena > div > div {\n    gap: 0.3rem;\n  }\n  #arena div:not(.statusContainer) .board {\n    max-width: 40vh;\n  }\n  #computer > div:not(.statusContainer) {\n    grid-area: B;\n  }\n  #arena #computer .statusContainer {\n    grid-area: S;\n    justify-items: start;\n  }\n  #computer {\n    grid-template-areas: "S B";\n  }\n  #computer .controls {\n    display: none;\n  }\n}\n\n@media (min-aspect-ratio: 916/410) {\n  #arenaView {\n    position: relative;\n    /* background-color: aqua; */\n  }\n  #topBar {\n    position: fixed;\n    top: 0.3rem;\n    left: 0.3rem;\n    grid-template-columns: auto;\n    background-color: white;\n  }\n  #topBar button {\n    scale: 0%;\n    background-color: white;\n  }\n  #helpBtn,\n  #newGameBtn {\n    position: absolute;\n  }\n  #helpBtn {\n    top: 100%;\n  }\n  #newGameBtn {\n    top: 300%;\n    width: max-content;\n  }\n  #topBar::before {\n    content: "MENU ^";\n  }\n  #topBar:hover::before {\n    content: "MENU v";\n  }\n  #topBar.open button {\n    scale: 100%;\n  }\n  #bottomBar {\n    position: fixed;\n    bottom: 0%;\n    right: 0%;\n  }\n}\n'],sourceRoot:""}]);const i=s},428:(n,e,t)=>{"use strict";t.d(e,{Z:()=>i});var a=t(537),r=t.n(a),o=t(645),s=t.n(o)()(r());s.push([n.id,"#endView {\n  position: fixed;\n  height: 100%;\n  width: 100%;\n  display: grid;\n  place-content: center;\n}\n\n#endCard {\n  border: 0.1em solid black;\n  border-radius: 1em;\n  background-color: white;\n  padding: 1em;\n  min-height: 20vh;\n  min-width: 50vw;\n  display: grid;\n  place-content: center;\n\n  font-size: 3rem;\n}\n\n#endMsg {\n  font-size: inherit;\n}\n","",{version:3,sources:["webpack://./src/styles/endView.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,YAAY;EACZ,WAAW;EACX,aAAa;EACb,qBAAqB;AACvB;;AAEA;EACE,yBAAyB;EACzB,kBAAkB;EAClB,uBAAuB;EACvB,YAAY;EACZ,gBAAgB;EAChB,eAAe;EACf,aAAa;EACb,qBAAqB;;EAErB,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB",sourcesContent:["#endView {\n  position: fixed;\n  height: 100%;\n  width: 100%;\n  display: grid;\n  place-content: center;\n}\n\n#endCard {\n  border: 0.1em solid black;\n  border-radius: 1em;\n  background-color: white;\n  padding: 1em;\n  min-height: 20vh;\n  min-width: 50vw;\n  display: grid;\n  place-content: center;\n\n  font-size: 3rem;\n}\n\n#endMsg {\n  font-size: inherit;\n}\n"],sourceRoot:""}]);const i=s},420:(n,e,t)=>{"use strict";t.d(e,{Z:()=>i});var a=t(537),r=t.n(a),o=t(645),s=t.n(o)()(r());s.push([n.id,"#helpView {\n  position: fixed;\n  height: 100%;\n  width: 100%;\n  padding: 10vh 10vw;\n  overflow: auto;\n}\n\n#helpContent {\n  background-color: white;\n  border: 0.15rem solid black;\n  border-radius: 1rem;\n  padding: 2rem;\n  display: grid;\n  gap: 1em;\n  font-size: 1.3rem;\n}\n","",{version:3,sources:["webpack://./src/styles/helpView.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,YAAY;EACZ,WAAW;EACX,kBAAkB;EAClB,cAAc;AAChB;;AAEA;EACE,uBAAuB;EACvB,2BAA2B;EAC3B,mBAAmB;EACnB,aAAa;EACb,aAAa;EACb,QAAQ;EACR,iBAAiB;AACnB",sourcesContent:["#helpView {\n  position: fixed;\n  height: 100%;\n  width: 100%;\n  padding: 10vh 10vw;\n  overflow: auto;\n}\n\n#helpContent {\n  background-color: white;\n  border: 0.15rem solid black;\n  border-radius: 1rem;\n  padding: 2rem;\n  display: grid;\n  gap: 1em;\n  font-size: 1.3rem;\n}\n"],sourceRoot:""}]);const i=s},756:(n,e,t)=>{"use strict";t.d(e,{Z:()=>i});var a=t(537),r=t.n(a),o=t(645),s=t.n(o)()(r());s.push([n.id,'* {\n  font-family: "Roboto", sans-serif;\n  margin: 0%;\n  padding: 0%;\n  box-sizing: border-box;\n}\n\nhtml,\nbody {\n  height: 100vh;\n  width: 100vw;\n  display: grid;\n  position: relative;\n}\n\n.disappear {\n  display: none !important;\n}\n\n.hide {\n  opacity: 0% !important;\n}\n\nbutton {\n  --col: black;\n  color: var(--col);\n  font-size: 1.5rem;\n  background-color: transparent;\n  border: none;\n  padding: 0.3rem 1rem;\n  border: 0.1em solid transparent;\n  border-radius: 0.3rem;\n  transition: 100ms;\n}\n\nbutton:hover {\n  border-color: var(--col);\n}\n\nbutton:active {\n  color: rgb(70, 64, 64);\n  background-color: rgb(214, 176, 52);\n}\n',"",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"AAAA;EACE,iCAAiC;EACjC,UAAU;EACV,WAAW;EACX,sBAAsB;AACxB;;AAEA;;EAEE,aAAa;EACb,YAAY;EACZ,aAAa;EACb,kBAAkB;AACpB;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,YAAY;EACZ,iBAAiB;EACjB,iBAAiB;EACjB,6BAA6B;EAC7B,YAAY;EACZ,oBAAoB;EACpB,+BAA+B;EAC/B,qBAAqB;EACrB,iBAAiB;AACnB;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,sBAAsB;EACtB,mCAAmC;AACrC",sourcesContent:['* {\n  font-family: "Roboto", sans-serif;\n  margin: 0%;\n  padding: 0%;\n  box-sizing: border-box;\n}\n\nhtml,\nbody {\n  height: 100vh;\n  width: 100vw;\n  display: grid;\n  position: relative;\n}\n\n.disappear {\n  display: none !important;\n}\n\n.hide {\n  opacity: 0% !important;\n}\n\nbutton {\n  --col: black;\n  color: var(--col);\n  font-size: 1.5rem;\n  background-color: transparent;\n  border: none;\n  padding: 0.3rem 1rem;\n  border: 0.1em solid transparent;\n  border-radius: 0.3rem;\n  transition: 100ms;\n}\n\nbutton:hover {\n  border-color: var(--col);\n}\n\nbutton:active {\n  color: rgb(70, 64, 64);\n  background-color: rgb(214, 176, 52);\n}\n'],sourceRoot:""}]);const i=s},645:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",a=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),a&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),a&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,a,r,o){"string"==typeof n&&(n=[[null,n,void 0]]);var s={};if(a)for(var i=0;i<this.length;i++){var A=this[i][0];null!=A&&(s[A]=!0)}for(var l=0;l<n.length;l++){var c=[].concat(n[l]);a&&s[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),e.push(c))}},e}},537:n=>{"use strict";n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),o="/*# ".concat(r," */"),s=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(s).concat([o]).join("\n")}return[e].join("\n")}},379:n=>{"use strict";var e=[];function t(n){for(var t=-1,a=0;a<e.length;a++)if(e[a].identifier===n){t=a;break}return t}function a(n,a){for(var o={},s=[],i=0;i<n.length;i++){var A=n[i],l=a.base?A[0]+a.base:A[0],c=o[l]||0,d="".concat(l," ").concat(c);o[l]=c+1;var u=t(d),p={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var C=r(p,a);a.byIndex=i,e.splice(i,0,{identifier:d,updater:C,references:1})}s.push(d)}return s}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var o=a(n=n||[],r=r||{});return function(n){n=n||[];for(var s=0;s<o.length;s++){var i=t(o[s]);e[i].references--}for(var A=a(n,r),l=0;l<o.length;l++){var c=t(o[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}o=A}}},569:n=>{"use strict";var e={};n.exports=function(n,t){var a=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},216:n=>{"use strict";n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{"use strict";n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{"use strict";n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,r&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(a,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{"use strict";n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(a){var r=e[a];if(void 0!==r)return r.exports;var o=e[a]={id:a,exports:{}};return n[a](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var a in e)t.o(e,a)&&!t.o(n,a)&&Object.defineProperty(n,a,{enumerable:!0,get:e[a]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{"use strict";var n=t(379),e=t.n(n),a=t(795),r=t.n(a),o=t(569),s=t.n(o),i=t(565),A=t.n(i),l=t(216),c=t.n(l),d=t(589),u=t.n(d),p=t(756),C={};C.styleTagTransform=u(),C.setAttributes=A(),C.insert=s().bind(null,"head"),C.domAPI=r(),C.insertStyleElement=c(),e()(p.Z,C),p.Z&&p.Z.locals&&p.Z.locals;var E=t(883),m={};m.styleTagTransform=u(),m.setAttributes=A(),m.insert=s().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=c(),e()(E.Z,m),E.Z&&E.Z.locals&&E.Z.locals;var h=t(420),B={};B.styleTagTransform=u(),B.setAttributes=A(),B.insert=s().bind(null,"head"),B.domAPI=r(),B.insertStyleElement=c(),e()(h.Z,B),h.Z&&h.Z.locals&&h.Z.locals;var g=t(428),f={};f.styleTagTransform=u(),f.setAttributes=A(),f.insert=s().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=c(),e()(g.Z,f),g.Z&&g.Z.locals&&g.Z.locals;var b=t(556);let y=null;const v=(()=>{const n={root:document.querySelector(":root"),board:{player:document.querySelector("#arenaView #player .board"),computer:document.querySelector("#arenaView #computer .board")},btn:{help:document.querySelector("#helpBtn"),newGame:document.querySelector("#newGameBtn"),randomize:document.querySelector("#randomizeBtn"),reset:document.querySelector("#resetBtn"),start:document.querySelector("#startBtn")},view:{arena:document.querySelector("#arenaView"),help:document.querySelector("#helpView"),end:document.querySelector("#endView")},shipStatus:{player:[document.querySelector("#arena #player .status[data-size='1']"),document.querySelector("#arena #player .status[data-size='2']"),document.querySelector("#arena #player .status[data-size='3']"),document.querySelector("#arena #player .status[data-size='4']")],computer:[document.querySelector("#arena #computer .status[data-size='1']"),document.querySelector("#arena #computer .status[data-size='2']"),document.querySelector("#arena #computer .status[data-size='3']"),document.querySelector("#arena #computer .status[data-size='4']")]},name:{player:document.querySelector("#arena #player .name"),computer:document.querySelector("#arena #computer .name")},topBar:document.querySelector("#arenaView #topBar"),endMsg:document.querySelector("#endView #endMsg"),getCell:(e,t)=>n.board[e].querySelector(`.cell[data-loc="${t}"]`)};let e=null,t="horizontal";const a=[];function r(n,e){Object.keys(e.cells).forEach((e=>{const t=document.createElement("div");t.classList.add("cell"),t.setAttribute("data-loc",e),t.setAttribute("data-status",""),n.appendChild(t)}))}function o(r,o){function s(n){if(!1===n)return!1;n=JSON.parse(`[${n}]`);let e=!0;return n.forEach((n=>{(n>9||n<0)&&(e=!1)})),e}const i="horizontal"===t?["left","right"]:["up","down"];let A=e-1;for(let n=a.length;n>0;n--){const n=a.pop();"hold"===n[0].getAttribute("data-status")&&n[0].setAttribute("data-status",n[1])}let l=n.getCell(r,o);a.push([l,l.getAttribute("data-status")]),l.setAttribute("data-status","hold");const c=[o,o];for(;A>0;)null!==c[0]&&(c[0]=b.Data["player"===r?"Player":"AI"].board.getAdjacentCell(c[0],i[0])),!1===s(c[0])&&(c[0]=null),null!==c[0]&&(l=n.getCell(r,c[0]),a.unshift([l,l.getAttribute("data-status")]),l.setAttribute("data-status","hold"),A-=1),A>0&&(null!==c[1]&&(c[1]=b.Data["player"===r?"Player":"AI"].board.getAdjacentCell(c[1],i[1])),!1===s(c[1])&&(c[1]=null),null!==c[1]&&(l=n.getCell(r,c[1]),a.push([l,l.getAttribute("data-status")]),l.setAttribute("data-status","hold"),A-=1))}function s(){const n=a.reduce(((n,e)=>(n.push(JSON.parse(`[${e[0].getAttribute("data-loc")}]`)),n)),[]),t=b.Data.Player.board.ships[e-1].cells.slice(0);S.Player.place(e,n)&&i("player",...t)}function i(e){for(var t=arguments.length,a=new Array(t>1?t-1:0),r=1;r<t;r++)a[r-1]=arguments[r];a.forEach((t=>{"string"==typeof t&&(t=JSON.parse(`[${t}]`));const a=b.Data["player"===e?"Player":"AI"].board,r=a.cells[t];let o;if("player"===e)switch(y){case"Setup":o="water";break;case"Battle":case"End":o="mist";break;default:throw Error(`Unexpected stage value: ${y}`)}else o="mist";null!==r.ship?a.ships[r.ship-1].isSunk()?o="sunk":r.shot?o="hit":"player"!==e&&"End"!==y||(o="ship"):r.shot&&(o="water"),n.getCell(e,t.join(",")).setAttribute("data-status",o)}))}function A(e){const t=b.Data["player"===e?"Player":"AI"].board,a=Object.values(t.cells).reduce(((n,e)=>(n.push(e.loc),n)),[]);i(e,...a),t.ships.forEach((t=>{t.isSunk()?n.shipStatus[e][t.length-1].setAttribute("data-status","sunk"):n.shipStatus[e][t.length-1].setAttribute("data-status","intact")}))}function l(t){const a=t-1,r=n.shipStatus.player[a];n.shipStatus.player.forEach((n=>{n===r?!1===n.classList.contains("selected")?(n.classList.add("selected"),e=t):(n.classList.remove("selected"),e=null):n.classList.remove("selected")}))}let c=null;return{elem:n,initialise:function(){r(n.board.player,b.Data.Player.board),r(n.board.computer,b.Data.AI.board),document.body.addEventListener("touchmove",(t=>{"Setup"===y&&null!==e&&function(e){const t=document.elementFromPoint(e.clientX,e.clientY);t.classList.contains("cell")&&c!==t&&(o(n.board.player.contains(t)?"player":"computer",t.getAttribute("data-loc")),c=t)}(t.touches[0])})),document.body.addEventListener("touchend",(()=>{"Setup"===y&&null!==e&&0!==a.length&&s()})),n.board.player.addEventListener("mouseleave",(()=>{if(a.length>0)for(let n=a.length;n>0;n--){const n=a.pop();"hold"===n[0].getAttribute("data-status")&&n[0].setAttribute("data-status",n[1])}})),n.board.player.querySelectorAll(".cell").forEach((a=>{!function(a){a.addEventListener("mouseover",(()=>{"Setup"===y&&null!==e&&o(n.board.player.contains(a)?"player":"computer",a.getAttribute("data-loc"))})),a.addEventListener("contextmenu",(r=>{if("Setup"===y&&null!==e)return r.preventDefault(),t="horizontal"===t?"vertical":"horizontal",o(n.board.player.contains(a)?"player":"computer",a.getAttribute("data-loc")),!1})),a.addEventListener("click",(()=>{"Setup"===y&&null!==e&&s()}))}(a)})),n.board.computer.querySelectorAll(".cell").forEach((n=>{n.addEventListener("click",(()=>{"Battle"===y&&"Player"===S.Game.getTurn()&&S.Player.play(n)}))})),n.btn.help.addEventListener("click",(()=>{n.view.help.classList.remove("disappear"),n.topBar.classList.remove("open")})),n.view.help.addEventListener("click",(e=>{e.target===e.currentTarget&&n.view.help.classList.add("disappear")})),n.view.end.addEventListener("click",(e=>{e.target===e.currentTarget&&n.view.end.classList.add("disappear")})),n.shipStatus.player.forEach(((n,e)=>{n.addEventListener("click",(()=>{"Setup"===y&&l(e+1)}))})),n.btn.reset.addEventListener("click",(()=>{"Setup"===y&&S.Player.resetBoard()})),n.btn.randomize.addEventListener("click",(()=>{"Setup"===y&&S.Player.randomize()})),n.btn.newGame.addEventListener("click",(()=>{S.Game.newGame(),n.topBar.classList.remove("open")})),n.btn.start.addEventListener("click",(()=>{S.Game.start()})),n.topBar.addEventListener("mouseover",(()=>{n.topBar.classList.add("open")}))},updateStage:function(){n.root.setAttribute("data-stage",y),A("player"),A("computer"),"Setup"===y&&n.shipStatus.player[3].dispatchEvent(new Event("click"))},selectShip:l,refreshCells:i,refreshBoard:A,selectedShipNum:function(){return e},updateTurn:function(e){Object.entries(n.name).forEach((n=>{n[0]===e?n[1].classList.add("playing"):n[1].classList.remove("playing")}))},declare:function(e){const t=e?"You win!":"You lose!";n.endMsg.textContent=t,n.view.end.classList.remove("disappear")}}})(),S=(()=>{const n=(()=>{const n=b.Data.AI;function e(){return[Math.floor(10*Math.random()),Math.floor(10*Math.random())]}return{play:function(){let t,a;if(0===n.exposedShips.length){let a=!0;for(;a;)t=e(),!1===n.look(t)&&(a=!1)}else if(null===n.exposedShips[0].direction()){const e=["up","down","left","right"];for(let r=0;r<e.length;r++){const o=b.Data.Player.board.getAdjacentCell(n.exposedShips[0].cells[0],e[r]);if(!1!==o&&!1===n.look(o)){t=o,a=e[r];break}}}else{const e="vertical"===n.exposedShips[0].direction()?["up","down"]:["left","right"],r=n.currentBoard().getAdjacentCell(n.exposedShips[0].cells[0],e[0]);if(!1!==r&&!1===n.look(r))t=r,a=e[0];else{const r=n.currentBoard().getAdjacentCell(n.exposedShips[0].cells[n.exposedShips[0].cells.length-1],e[1]);t=r,a=e[1]}}if(n.visibleCells.push(JSON.stringify(t)),b.Data.Player.board.receiveAttack(t)){let e=!0;const r=b.Data.Player.board.cells[t].ship,o=b.Data.Player.board.ships[r-1].isSunk();if(0!==n.exposedShips.length&&n.exposedShips.forEach(((s,i)=>{r===s.ship&&(e=!1,!1===o?(["up","left"].includes(a)?s.cells.unshift(t):s.cells.push(t),null===s.direction()&&s.direction(a)):n.exposedShips.splice(i,1))})),e&&!1===o){const e=n.exposed(b.Data.Player.board.cells[t].ship);n.exposedShips.push(e),e.cells.push(t)}}setTimeout((()=>{v.refreshBoard("player"),S.Game.updateTurn()}),1500)},randomLoc:e,resetBoard:function(){b.Data.AI.reset(),v.refreshBoard("computer")}}})(),e={play:function(n){const e=JSON.parse(`[${n.getAttribute("data-loc")}]`);!1===b.Data.AI.board.cells[e].shot&&(b.Data.AI.board.receiveAttack(e),v.refreshBoard("computer"),t.updateTurn())},place:function(n,e){if(e.reduce(((n,e)=>(null!==b.Data.Player.board.cells[e].ship&&(n=!1),n)),!0)){b.Data.Player.board.place(n,...e),v.refreshCells("player",...e);const t=b.Data.Player.board.ships.reduce(((n,e)=>(0===e.cells.length&&(n=e.length),n)),n);return v.selectShip(t),!0}return!1},resetBoard:function(){b.Data.Player.board.initiate(),v.refreshBoard("player"),v.selectShip(4)},randomize:function(){b.Data.Player.board.placeAtRandom(),v.refreshBoard("player"),null!==v.selectedShipNum&&v.selectShip(v.selectedShipNum())}},t=(()=>{let t=null;function r(){t=null}return{start:function(){const n=b.Data.Player.board.ships.reduce(((n,e)=>(0===e.cells.length&&(n=!1),n)),!0);"Setup"===y&&n&&(b.Data.AI.board.placeAtRandom(),a("Battle"),t="Player",v.updateTurn("player"))},newGame:function(){n.resetBoard(),e.resetBoard(),r(),a("Setup")},updateTurn:function(){t="Player"===t?"AI":"Player",b.Data[t].board.defeated()?function(){let n;if(b.Data.AI.board.defeated())n=!0;else{if(!b.Data.Player.board.defeated())throw Error("Neither board is defeated but endGame was called");n=!1}a("End"),v.declare(n)}():(v.updateTurn("Player"===t?"player":"computer"),"AI"===t&&n.play())},getTurn:function(){return t},reset:r}})();function a(n){y=n,v.updateStage()}return{AI:n,Player:e,Game:t,initialise:function(){v.initialise(),a("Setup")}}})();S.initialise()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,